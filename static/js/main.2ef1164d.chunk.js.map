{"version":3,"sources":["components/Title/index.js","components/Container/index.js","components/Wrapper/index.js","utils/API.js","components/Form/index.js","components/Row/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","Container","fluid","Wrapper","axios","get","Form","htmlFor","value","search","onChange","handleInputChange","name","list","type","placeholder","id","onClick","handleFormSubmit","EmployeeTable","useState","employees","setEmployees","useEffect","API","then","res","data","results","e","filterResult","filter","employee","location","state","includes","target","map","key","src","picture","large","alt","first","last","city","phone","cell","email","Search","lastName","style","minHeight","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gUAOeA,MAJf,SAAeC,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,gCCEvBC,MAJf,SAAmBH,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAMI,MAAQ,SAAW,KAAUJ,K,cCIzDK,MAJf,SAAiBL,GACf,OAAO,wCAAMC,UAAU,WAAcD,K,iBCDxB,EACL,WACN,OAAOM,IAAMC,IAJD,iD,MC0BDC,MAvBf,SAAcR,GACZ,OACE,0BAAMC,UAAU,UACd,yBAAKA,UAAU,cACb,2BAAOQ,QAAQ,QAAf,kCACA,2BACEC,MAAOV,EAAMW,OACbC,SAAUZ,EAAMa,kBAChBC,KAAK,OACLC,KAAK,QACLC,KAAK,OACLf,UAAU,eACVgB,YAAY,2BACZC,GAAG,SAEL,4BAAQF,KAAK,SAASG,QAASnB,EAAMoB,iBAAkBnB,UAAU,mBAAjE,aCsCOoB,MAnDf,WAA0B,IAAD,EAESC,mBAAS,IAFlB,mBAElBC,EAFkB,KAEPC,EAFO,KAgBrB,OAZFC,qBAAU,WACNC,IACGC,MAAK,SAAAC,GACJJ,EAAaI,EAAIC,KAAKC,cAE3B,IAQC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMjB,kBAPS,SAACkB,GACpB,IAAMC,EAAeT,EAAUU,QAAO,SAAAC,GAAQ,OAAIA,EAASC,SAASC,MAAMC,SAASN,EAAEO,OAAO5B,UAC5Fc,EAAaQ,MAMT,yBAAK/B,UAAU,WACX,2BAAOA,UAAU,mCACb,2BAAOA,UAAU,cACb,4BACE,qCACA,0CACA,yCACA,oCACA,qCACA,4CACA,4CACA,uCAGN,+BACGsB,EAAUgB,KAAI,SAAAL,GAAQ,OACrB,wBAAIM,IAAKN,EAAShB,GAAGR,OACnB,4BAAI,yBAAK+B,IAAKP,EAASQ,QAAQC,MAAOC,IAAI,iBAC1C,4BAAKV,EAASpB,KAAK+B,OACnB,4BAAKX,EAASpB,KAAKgC,MACnB,4BAAKZ,EAASC,SAASY,MACvB,4BAAKb,EAASC,SAASC,OACvB,4BAAKF,EAASc,OACd,4BAAKd,EAASe,MACd,4BAAKf,EAASgB,gBC1BrBC,E,4MAlBXf,MAAQ,CACJgB,SAAU,GACVtB,QAAS,GACTnB,OAAQ,I,uDAIR,OACE,6BACE,kBAAC,EAAD,CAAW0C,MAAO,CAAEC,UAAW,QAC7B,wBAAIrD,UAAU,eAAd,0BACA,kBAAC,EAAD,Y,GAZOsD,aCuCNC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,6BACA,kBAAC,EAAD,2BACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,EAAD,UCxBUS,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ef1164d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=90&nat=us\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Form(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Search for employees by state:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"name\"\n          list=\"names\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Type in a state to begin\"\n          id=\"name\"\n        />\n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport API from \"../../utils/API\";\r\nimport Form from \"../Form\";\r\n\r\n\r\nfunction EmployeeTable() {\r\n\r\n  let [employees, setEmployees] = useState([]);\r\n\r\n  useEffect(() => {\r\n      API.search()\r\n        .then(res => {\r\n          setEmployees(res.data.results)\r\n      });      \r\n  }, []);\r\n\r\n  let searchFunction = (e) => {\r\n    const filterResult = employees.filter(employee => employee.location.state.includes(e.target.value));\r\n    setEmployees(filterResult)\r\n  }\r\n\r\n    return (\r\n      <Wrapper>\r\n        <Form handleInputChange = {searchFunction}/>\r\n        <div className=\"content\">\r\n            <table className=\"table table-striped table-hover\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                      <th>Photo</th>\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>City</th>\r\n                      <th>State</th>\r\n                      <th>Office Phone</th>\r\n                      <th>Mobile Phone</th>\r\n                      <th>Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {employees.map(employee => (\r\n                    <tr key={employee.id.value}>\r\n                      <td><img src={employee.picture.large} alt=\"Profile pic\"/></td>\r\n                      <td>{employee.name.first}</td>\r\n                      <td>{employee.name.last}</td>\r\n                      <td>{employee.location.city}</td>\r\n                      <td>{employee.location.state}</td>\r\n                      <td>{employee.phone}</td>\r\n                      <td>{employee.cell}</td>\r\n                      <td>{employee.email}</td>\r\n                    </tr>))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n      </Wrapper>\r\n                  )}\r\n\r\nexport default EmployeeTable;\r\n\r\n","import React, { Component } from \"react\";\r\nimport Container from \"../components/Container\";\r\nimport EmployeeTable from \"../components/Row\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        lastName: \"\",\r\n        results: [],\r\n        search: []\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Container style={{ minHeight: \"80%\" }}>\r\n              <h3 className=\"text-center\">Search for an Employee</h3>\r\n              <EmployeeTable/>\r\n            </Container>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Search","// import React, { Component } from \"react\";\n// import Wrapper from \"./components/Wrapper\";\n// import Title from \"./components/Title\";\n// import Form from \"./components/Form\";\n\n// class App extends Component {\n\n\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Form />\n//       </Wrapper>\n//     );\n//   }\n// }\n\n// export default App;\n\n// //======================\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Title from \"./components/Title\";\nimport Search from \"./pages/Directory\"\nimport Wrapper from \"./components/Wrapper\";\nimport EmployeeTable from \"./components/Row\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n      <Title>Employee Directory</Title>\n        <Wrapper>\n          <Route exact path=\"/\" component={Search} />\n          <EmployeeTable />\n        </Wrapper>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}